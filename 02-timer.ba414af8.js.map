{"version":3,"sources":["js/02-timer.js"],"names":["refs","input","document","querySelector","timerDays","timerHours","timerMinutes","timerSeconds","btnStart","Timer","constructor","onTick","intervalId","isActive","init","time","convertMs","start","setInterval","dateEntered","ms","Date","value","getTime","timer","stop","clearInterval","pad","String","padStart","days","Math","floor","hour","hours","minute","minutes","second","seconds","updateTextContent","textContent","addEventListener","bind"],"mappings":";;;AA8IA,aAjGA,QAAA,qBAEA,MAAMA,EAAO,CACTC,MAAOC,SAASC,cAAc,kBAC9BC,UAAWF,SAASC,cAAc,eAClCE,WAAYH,SAASC,cAAc,gBACnCG,aAAcJ,SAASC,cAAc,kBACrCI,aAAcL,SAASC,cAAc,kBACrCK,SAAUN,SAASC,cAAc,iBAGrC,MAAMM,EACFC,aAAY,OAAEC,IACLC,KAAAA,WAAa,KACd,KAAKC,UAAW,EAChB,KAAKF,OAASA,EAEbG,KAAAA,OAGTA,OACUC,MAAAA,EAAO,KAAKC,UAAU,GACvBL,KAAAA,OAAOI,GAGhBE,QACQ,KAAKJ,WAIJA,KAAAA,UAAW,EAEXD,KAAAA,WAAaM,YAAY,KACpBC,MAIAC,EAJc,IAAIC,KAAKrB,EAAKC,MAAMqB,OACTC,UACX,IAAIF,KAIlBN,EAAO,KAAKC,UAAUI,GAExBA,GAAM,EACNI,EAAMC,QAIDL,EAAK,KACVI,EAAMC,OAGLd,KAAAA,OAAOI,KACb,MAGPU,OACIC,cAAc,KAAKd,YACdC,KAAAA,UAAW,EACVE,MAAAA,EAAO,KAAKC,UAAU,GACvBL,KAAAA,OAAOI,GAGhBY,IAAIL,GACOM,OAAAA,OAAON,GAAOO,SAAS,EAAG,KAGrCb,UAAUI,GAgBC,MAAA,CAAEU,KARI,KAAKH,IAAII,KAAKC,MAAMZ,EAHrBa,QAWGC,MAND,KAAKP,IAAII,KAAKC,MAAOZ,EALvBa,MADCE,OAYSC,QAJN,KAAKT,IAAII,KAAKC,MAAQZ,EAP1Ba,MADCE,KADEE,MAagBC,QAFf,KAAKX,IAAII,KAAKC,MAASZ,EAT3Ba,MADCE,KADEE,IADA,QAkBvB,MAAMb,EAAQ,IAAIf,EAAM,CACpBE,OAAQ4B,IAIZ,SAASA,GAAkB,KAAET,EAAF,MAAQI,EAAR,QAAeE,EAAf,QAAwBE,IAC/CtC,EAAKI,UAAUoC,eAAiBV,IAChC9B,EAAKK,WAAWmC,eAAiBN,IACjClC,EAAKM,aAAakC,eAAiBJ,IACnCpC,EAAKO,aAAaiC,eAAiBF,IAGvCtC,EAAKQ,SAASiC,iBAAiB,QAASjB,EAAMP,MAAMyB,KAAKlB","file":"02-timer.ba414af8.js","sourceRoot":"../src","sourcesContent":["// import '../css/common.css';\n\n// const refs = {\n//     input: document.querySelector('#date-selector'),\n//     timerDays: document.querySelector(\"span[data-days]\"),\n//     timerHours: document.querySelector(\"span[data-hours]\"),\n//     timerMinutes: document.querySelector(\"span[data-minutes]\"),\n//     timerSeconds: document.querySelector(\"span[data-seconds]\"),\n//     btnStart: document.querySelector(\"button[data-start]\"),\n// };\n\n// let timerId = null;\n\n// refs.btnStart.addEventListener('click', onClickInterval);\n\n// function onClickBtnStart() {\n//     const dateEntered = new Date(refs.input.value);\n//     const targetDate = dateEntered.getTime()\n//     const currentDate = new Date();\n\n//     const time = targetDate - (-currentDate);\n\n//     const days = Math.floor(time / (1000 * 60 * 60 * 24));\n//     const daysBeautified = days.toString().padStart(2, \"0\");\n\n//     const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n//     const hoursBeautified = hours.toString().padStart(2, \"0\");\n\n//     const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n//     const minsBeautified = mins.toString().padStart(2, \"0\");\n\n//     const secs = Math.floor((time % (1000 * 60)) / 1000);\n//     const secsBeautified = secs.toString().padStart(2, \"0\");\n\n//     refs.timerDays.textContent = `${daysBeautified}`;\n//     refs.timerHours.textContent = `${hoursBeautified}`;\n//     refs.timerMinutes.textContent = `${minsBeautified}`;\n//     refs.timerSeconds.textContent = `${secsBeautified}`;\n// };\n\n\n// function onClickInterval() {\n//     timerId = setInterval(() => { onClickBtnStart() }, 1000);\n// };\n\nimport '../css/common.css';\n\nconst refs = {\n    input: document.querySelector('#date-selector'),\n    timerDays: document.querySelector('[data-days]'),\n    timerHours: document.querySelector('[data-hours]'),\n    timerMinutes: document.querySelector('[data-minutes]'),\n    timerSeconds: document.querySelector('[data-seconds]'),\n    btnStart: document.querySelector('[data-start]'),\n};\n\nclass Timer {\n    constructor({ onTick }) {\n        this.intervalId = null,\n            this.isActive = false,\n            this.onTick = onTick;\n\n        this.init();\n    }\n\n    init() {\n        const time = this.convertMs(0);\n        this.onTick(time);\n    }\n\n    start() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n\n        this.intervalId = setInterval(() => {\n            const dateEntered = new Date(refs.input.value);\n            const targetDate = dateEntered.getTime();\n            const currentDate = new Date();\n\n            const ms = targetDate - currentDate;\n\n            const time = this.convertMs(ms);\n\n            if (ms <= 0) {\n                timer.stop();\n                return;\n            }\n\n            else if (ms < 1000) {\n                timer.stop();\n            }\n\n            this.onTick(time);\n        }, 1000);\n    }\n\n    stop() {\n        clearInterval(this.intervalId);\n        this.isActive = false;\n        const time = this.convertMs(0);\n        this.onTick(time);\n    }\n\n    pad(value) {\n        return String(value).padStart(2, '0');\n    }\n\n    convertMs(ms) {\n        // Number of milliseconds per unit of time\n        const second = 1000;\n        const minute = second * 60;\n        const hour = minute * 60;\n        const day = hour * 24;\n\n        // Remaining days\n        const days = this.pad(Math.floor(ms / day));\n        // Remaining hours\n        const hours = this.pad(Math.floor((ms % day) / hour));\n        // Remaining minutes\n        const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n        // Remaining seconds\n        const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n        return { days, hours, minutes, seconds };\n    }\n}\n\nconst timer = new Timer({\n    onTick: updateTextContent,\n});\n\n\nfunction updateTextContent({ days, hours, minutes, seconds }) {\n    refs.timerDays.textContent = `${days}`;\n    refs.timerHours.textContent = `${hours}`;\n    refs.timerMinutes.textContent = `${minutes}`;\n    refs.timerSeconds.textContent = `${seconds}`;\n}\n\nrefs.btnStart.addEventListener('click', timer.start.bind(timer));"]}