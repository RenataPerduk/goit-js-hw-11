{"version":3,"sources":["js/03-promises.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","logger1","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AA2FA,MAAMA,EAAQC,GAEH,IAAIC,QAAQC,GACfC,WAAWC,EAAQJ,EAAIA,IAGzBI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAOjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGtBC,EAAkB,CAACC,EAAUC,IACxB,IAAIb,QAASC,IAChBW,EAASE,IAAIC,IACLA,EAAKN,OAASI,GACdZ,EAAQ,IAAKc,EAAML,QAASK,EAAKL,aAM3CM,EAAUC,GAAgBZ,QAAQa,MAAMD,GAO9CN,EAAgBH,EAAO,SAASD,KAAKF,QAAQa,OAC7CP,EAAgBH,EAAO,QAAQD,KAAKF,QAAQa,OAO5C,MAAMC,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGlDK,EAAmBC,GACrB,IAAI1B,QAAQ,CAACC,EAAS0B,KACZ7B,MAAAA,EAAQqB,EAA0B,IAAK,KAE7CjB,WAAW,KACYoB,KAAKE,SAAW,GAE/BvB,EAAQ,CAAE2B,GAAIF,EAAYE,GAAIxB,KAAMN,IAEpC6B,EAAOD,EAAYE,KAExB9B,KAEL+B,EAAa,EAAGD,GAAAA,EAAIxB,KAAAA,MACtBC,QAAQC,mBAAmBsB,kBAAmBxB,QAG5C0B,EAAYF,IACdvB,QAAQ0B,qCAAqCH,+BAWjDH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMzB,KAAKsB,GAAYI,MAAMH,GAC/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH","file":"03-promises.50bb9a69.js","sourceRoot":"../src","sourcesContent":["// // const searchForm = document.querySelector('form');\n// // searchForm.addEventListener('submit', createPromise);\n\n\n// // const searchForm = document.querySelector('form');\n// // const delay = document.querySelector('delay');\n// // const step = document.querySelector('step');\n// // const amount = document.querySelector('amount')\n\n// // searchForm.addEventListener('submit', newCreatePromise);\n// // delay.addEventListener('click', newDelay);\n// // step.addEventListener('click', newStep);\n// // amount.addEventListener('click', newAmount);\n\n\n\n// // function newCreatePromise(position, delay) {\n// //     const shouldResolve = Math.random() > 0.3;\n\n// //     newCreatePromise((2, 1500)\n// //         .then(resolve => {\n// //             console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// //         })\n// //         .catch(error => {\n// //             console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// //         }), delay)\n// // }\n\n\n\n\n\n// // const createPromise = new createPromise((position, delay) => {\n\n// //     const shouldResolve = Math.random() > 0.3;\n\n// //     setTimeout(() => {\n// //         if (shouldResolve) {\n// //             resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// //         };\n// //         reject(`❌ Rejected promise ${position} in ${delay}ms`);\n// //     }, delay);\n// // });\n// // return promise;\n\n// // btnCreatePromise.addEventListener('submit', createPromise)\n\n\n\n// function newCreatePromise({ delay, step, amount }) {\n//     newCreatePromiseDelay.value = `${delay}`;\n//     newCreatePromiseStep.value = `${step}`;\n//     newCreatePromiseAmount.value = `${amount}`;\n\n//     createPromise(2, 1500)\n//     shouldResolve = Math.random() > 0.3\n//         .then(({ position, delay }) => {\n//             console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//         })\n//         .catch(({ position, delay }) => {\n//             console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//         }), delay\n// };\n\n\n// function createPromise(position, delay) {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//         // Fulfill\n//     } else {\n//         // Reject\n//     }\n// }\n\n// return createPromise(2, 1500)\n//     .then(({ position, delay }) => {\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     })\n//     .catch(({ position, delay }) => {\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//     });\n\n\n\n\n\n//Задание 1\n/*Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\nЗначением\nисполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.*/\n\nconst delay = ms => {\n    // Change this function\n    return new Promise(resolve =>\n        setTimeout(logger, ms, ms));\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n\n\n//Задание 2\n/*Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.*/\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve) => {\n        allUsers.map(user => {\n            if (user.name === userName) {\n                resolve({ ...user, active: !user.active });\n            }\n        });\n    });\n};\n\nconst logger1 = updatedUsers => console.table(updatedUsers);\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n\n//Задание 3\n/*Перепиши функцию makeTransaction() так, чтобы она не использовала\ncallback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.*/\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) =>\n    new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    });\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = (id) => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}